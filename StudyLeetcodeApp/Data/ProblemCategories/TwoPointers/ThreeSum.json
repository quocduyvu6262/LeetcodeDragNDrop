{
  "name": "Three Sum",
  "difficulty": "Medium",
  "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.\n\nExample:\n nums = [-1, 0, 1, 2, -1, -4]\n A possible output is: [[-1, -1, 2], [-1, 0, 1]]",
  "snippets": [
    "nums.sort()\nresult = []",

    "for i in range(len(nums) - 2):\n if i > 0 and nums[i] == nums[i-1]:\n  continue\n  left, right = i + 1, len(nums) - 1",

    "while left < right:\ncurrent_sum = nums[i] + nums[left] + nums[right]",

    "if current_sum == 0:\n  result.append([nums[i], nums[left], nums[right]])\n    while left < right and nums[left] == nums[left+1]:\n        left += 1\n    while left < right and nums[right] == nums[right-1]:\n        right -= 1\n    left += 1\n    right -= 1",

    "elif current_sum < 0:\n left += 1\nelse:\n right -= 1",

    "return result"
  ],
  "function": "def threeSum(nums):",
  "inputs": ["[-1,0,1,2,-1,-4]"],
  "outputs": ["[-1,-1,2],[-1,0,1]"],
  "complexity_options": ["O(n²), O(1)", "O(n³), O(1)", "O(n log n), O(n)", "O(n²), O(n)"],
  "time_complexity_options": ["O(n²)", "O(n³)", "O(n log n)", "O(n)"],
  "space_complexity_options": ["O(1)", "O(n)", "O(n²)", "O(log n)"],
  "correct_time_complexity": "O(n^2)",
  "correct_space_complexity": "O(1)"
}
